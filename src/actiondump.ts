// Generated by quicktype.io

export interface ActionDump {
    codeblocks:          Codeblock[];
    actions:             Action[];
    gameValueCategories: GameValueCategoryElement[];
    gameValues:          GameValue[];
    particleCategories:  Particle[];
    particles:           Particle[];
    soundCategories:     SoundCategory[];
    sounds:              Sound[];
    potions:             Potion[];
    cosmetics:           Cosmetic[];
    shops:               Cosmetic[];
}

export interface Action {
    name:             string;
    codeblockName:    Name;
    tags:             Tag[];
    aliases:          string[];
    icon:             Icon;
    subActionBlocks?: SubActionBlock[];
}

export enum Name {
    CallFunction = "CALL FUNCTION",
    Control = "CONTROL",
    Else = "ELSE",
    EntityAction = "ENTITY ACTION",
    EntityEvent = "ENTITY EVENT",
    Function = "FUNCTION",
    GameAction = "GAME ACTION",
    IfEntity = "IF ENTITY",
    IfGame = "IF GAME",
    IfPlayer = "IF PLAYER",
    IfVariable = "IF VARIABLE",
    PlayerAction = "PLAYER ACTION",
    PlayerEvent = "PLAYER EVENT",
    Process = "PROCESS",
    Repeat = "REPEAT",
    SelectObject = "SELECT OBJECT",
    SetVariable = "SET VARIABLE",
    StartProcess = "START PROCESS",
}

export interface Icon {
    material:                string;
    name:                    string;
    deprecatedNote:          string[];
    description:             string[];
    example:                 string[];
    worksWith:               string[];
    additionalInfo:          Array<string[]>;
    requiredRank:            RequiredRank;
    requireTokens:           boolean;
    requireRankAndTokens:    boolean;
    advanced:                boolean;
    loadedItem:              LoadedItem;
    tags?:                   number;
    arguments?:              Argument[];
    head?:                   string;
    color?:                  Color;
    cancellable?:            boolean;
    cancelledAutomatically?: boolean;
    returnType?:             Type;
    returnDescription?:      string[];
}

export interface Argument {
    type?:        Type;
    plural?:      boolean;
    optional?:    boolean;
    description?: string[];
    notes?:       Array<string[]>;
    text?:        Text;
}

export enum Text {
    Empty = "",
    OR = "§x§f§f§5§5§a§aOR",
}

export enum Type {
    AnyType = "ANY_TYPE",
    Block = "BLOCK",
    BlockTag = "BLOCK_TAG",
    Dict = "DICT",
    EntityType = "ENTITY_TYPE",
    Item = "ITEM",
    List = "LIST",
    Location = "LOCATION",
    None = "NONE",
    Number = "NUMBER",
    Particle = "PARTICLE",
    Potion = "POTION",
    Projectile = "PROJECTILE",
    Sound = "SOUND",
    SpawnEgg = "SPAWN_EGG",
    Text = "TEXT",
    Variable = "VARIABLE",
    Vector = "VECTOR",
    Vehicle = "VEHICLE",
}

export enum TypeToString {
    "TEXT" = "Text",
    "NUMBER" = "Number",
    "LOCATION" = "Location",
    "VECTOR" = "Vector",
    "SOUND" = "Sound",
    "PARTICLE" = "Particle Effect",
    "POTION" = "Potion Effect",
    "VARIABLE" = "Variable",
    "ANY_TYPE" = "Any Value",
    "ITEM" = "Item",
    "BLOCK" = "Block",
    "ENTITY_TYPE" = "Entity Type",
    "VEHICLE" = "Vehicle",
    "SPAWN_EGG" = "Spawn Egg",
    "PROJECTILE" = "Projectile",
    "BLOCK_TAG" = "Block Tag",
    "LIST" = "List",
    "DICT" = "Dictionary",
    "NONE" = "None",
}

export interface Color {
    red:   number;
    green: number;
    blue:  number;
}

export enum LoadedItem {
    Arrow = "ARROW",
    Empty = "",
    FireworkRocket = "FIREWORK_ROCKET",
}

export enum RequiredRank {
    Dev = "Dev",
    Emperor = "Emperor",
    Empty = "",
    Mythic = "Mythic",
    Noble = "Noble",
    Overlord = "Overlord",
}

export enum SubActionBlock {
    IfEntity = "if_entity",
    IfGame = "if_game",
    IfPlayer = "if_player",
    IfVar = "if_var",
}

export interface Tag {
    name:          string;
    options:       Option[];
    defaultOption: string;
    slot:          number;
}

export interface Option {
    name:    string;
    icon:    Icon;
    aliases: string[];
}

export interface Codeblock {
    name:       Name;
    identifier: string;
    item:       Icon;
}

export interface Cosmetic {
    id:            string;
    icon?:         Icon;
    name?:         string;
    slot?:         number;
    category?:     CategoryClass;
    purchasables?: Purchasable[];
}

export interface CategoryClass {
}

export interface Purchasable {
    item:             Icon;
    id:               null | string;
    price?:           number;
    currencyType?:    CurrencyType;
    oneTimePurchase?: boolean;
}

export enum CurrencyType {
    PrizeTicket = "Prize Ticket",
    Token = "Token",
}

export interface GameValueCategoryElement {
    identifier: string;
    guiSlot:    number;
    icon:       Icon;
}

export interface GameValue {
    aliases:  string[];
    category: GameValueCategory;
    icon:     Icon;
}

export enum GameValueCategory {
    EventValues = "Event Values",
    InformationalValues = "Informational Values",
    ItemValues = "Item Values",
    LocationalValues = "Locational Values",
    PlotValues = "Plot Values",
    StatisticalValues = "Statistical Values",
}

export interface Particle {
    particle: string;
    icon:     Icon;
    category: ParticleCategoryCategory | null;
    fields:   Field[];
}

export enum ParticleCategoryCategory {
    AmbientBlockParticles = "Ambient Block Particles",
    AmbientEntityParticles = "Ambient Entity Particles",
    AmbientParticles = "Ambient Particles",
    BlockBehaviorParticles = "Block Behavior Particles",
    EntityAttackParticles = "Entity Attack Particles",
    EntityBehaviorParticles = "Entity Behavior Particles",
    LiquidParticles = "Liquid Particles",
}

export enum Field {
    Color = "Color",
    ColorVariation = "Color Variation",
    Material = "Material",
    Motion = "Motion",
    MotionVariation = "Motion Variation",
    Roll = "Roll",
    Size = "Size",
    SizeVariation = "Size Variation",
}

export interface Potion {
    potion: string;
    icon:   Icon;
}

export interface SoundCategory {
    identifier:       string;
    icon:             Icon;
    hasSubCategories: boolean;
}

export interface Sound {
    sound: string;
    icon:  Icon;
}

const ActionDump: ActionDump = await import('../public/actiondump.json') as ActionDump;
export default ActionDump;

export function cleanText(text: string) {
    return text.replace(/§./g,'')
}